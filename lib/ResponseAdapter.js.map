{"version":3,"sources":["../src/ResponseAdapter.js"],"names":["ResponseAdapter","typesenseHits","adaptedResult","adaptedHit","typesenseHit","value","result","Object","matchLevel","matchedWords","highlight","Array","typesenseFacetCounts","facet","count","hits","nbHits","page","nbPages","Math","hitsPerPage","facets","processingTimeMS","search_time_ms"],"mappings":"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","sourcesContent":["\"use strict\";\n\nexport class ResponseAdapter {\n  constructor(typesenseResponse) {\n    this.typesenseResponse = typesenseResponse;\n  }\n\n  _adaptHits(typesenseHits) {\n    let adaptedResult = [];\n    adaptedResult = typesenseHits.map(typesenseHit => {\n      const adaptedHit = {\n        ...typesenseHit.document\n      };\n      adaptedHit.objectID = typesenseHit.document.id;\n      adaptedHit._highlightResult = this._adaptHighlightResult(typesenseHit);\n      // Todo: Fix Snippets and Highlights\n      adaptedHit._snippetResult = adaptedHit._highlightResult;\n      return adaptedHit;\n    });\n    return adaptedResult;\n  }\n\n  _adaptHighlightTag(value) {\n    return value\n      .replace(new RegExp(\"<mark>\", \"g\"), \"__ais-highlight__\")\n      .replace(new RegExp(\"</mark>\", \"g\"), \"__/ais-highlight__\");\n  }\n\n  _adaptHighlightResult(typesenseHit) {\n    // Algolia lists all searchable attributes in this key, even if there are no matches\n    // So do the same and then override highlights\n\n    const result = Object.assign(\n      {},\n      ...Object.keys(typesenseHit.document).map(attribute => ({\n        [attribute]: {\n          value: typesenseHit.document[attribute],\n          matchLevel: \"none\",\n          matchedWords: []\n        }\n      }))\n    );\n\n    typesenseHit.highlights.forEach(highlight => {\n      result[highlight.field] = {\n        value: highlight.snippet,\n        matchLevel: \"full\",\n        matchedWords: [] // Todo: Fix MatchedWords\n      };\n    });\n\n    // Now convert any values that have an array value\n    // Also, replace highlight tag\n    Object.keys(result).forEach(attribute => {\n      const { value, matchLevel, matchedWords } = result[attribute];\n      if (Array.isArray(value)) {\n        result[attribute] = [];\n        value.forEach(v => {\n          result[attribute].push({\n            value: this._adaptHighlightTag(`${v}`),\n            matchLevel: matchLevel, // TODO: Fix MatchLevel for array\n            matchedWords: matchedWords // TODO: Fix MatchedWords for array\n          });\n        });\n      } else {\n        // Convert all values to strings\n        result[attribute].value = this._adaptHighlightTag(`${value}`);\n      }\n    });\n\n    return result;\n  }\n\n  _adaptFacets(typesenseFacetCounts) {\n    const adaptedResult = {};\n    typesenseFacetCounts.forEach(facet => {\n      Object.assign(adaptedResult, {\n        [facet.field_name]: Object.assign(\n          {},\n          ...facet.counts.map(count => ({ [count.value]: count.count }))\n        )\n      });\n    });\n    return adaptedResult;\n  }\n\n  adapt() {\n    const adaptedResult = {\n      hits: this._adaptHits(this.typesenseResponse.hits),\n      nbHits: this.typesenseResponse.found,\n      page: this.typesenseResponse.page,\n      nbPages: Math.ceil(\n        this.typesenseResponse.found / this.typesenseResponse.hits.length\n      ),\n      hitsPerPage: this.typesenseResponse.hits.length,\n      facets: this._adaptFacets(this.typesenseResponse.facet_counts),\n      processingTimeMS: this.typesenseResponse.search_time_ms\n    };\n    return adaptedResult;\n  }\n}\n"],"file":"ResponseAdapter.js"}