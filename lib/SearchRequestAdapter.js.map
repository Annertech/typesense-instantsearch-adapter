{"version":3,"sources":["../src/SearchRequestAdapter.js"],"names":["SearchRequestAdapter","facetFilters","adaptedResult","intermediateFacetFilters","facetName","facetValue","facetFilter","q","query_by","facet_by","filter_by","max_facet_values","page"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;IAEaA,oB;;;AACX,WAAA,oBAAA,CAAA,oBAAA,EAAA,eAAA,EAAA,cAAA,EAAmE;AAAA,KAAA,GAAA,gBAAA,CAAA,SAAA,CAAA,EAAA,IAAA,EAAA,oBAAA;AACjE,SAAA,oBAAA,GAAA,oBAAA;AACA,SAAA,eAAA,GAAA,eAAA;AACA,SAAA,cAAA,GAAA,cAAA;AACD;;;;uCAEkBC,Y,EAAc;AAC/B,UAAIC,aAAa,GAAjB,EAAA;;AAEA,UAAI,CAAJ,YAAA,EAAmB;AACjB,eAAA,aAAA;AACD;;AAED,UAAMC,wBAAwB,GAPC,EAO/B,CAP+B,CAS/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAF,MAAAA,YAAY,CAAZA,IAAAA,GAAAA,OAAAA,CAA4B,UAAA,WAAA,EAAe;AAAA,YAAA,kBAAA,GACTK,WAAW,CAAXA,KAAAA,CADS,GACTA,CADS;AAAA,YAAA,mBAAA,GAAA,CAAA,GAAA,eAAA,CAAA,SAAA,CAAA,EAAA,kBAAA,EAAA,CAAA,CAAA;AAAA,YAClCF,SADkC,GAAA,mBAAA,CAAA,CAAA,CAAA;AAAA,YACvBC,UADuB,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAEzCF,QAAAA,wBAAwB,CAAxBA,SAAwB,CAAxBA,GACEA,wBAAwB,CAAxBA,SAAwB,CAAxBA,IADFA,EAAAA;AAEAA,QAAAA,wBAAwB,CAAxBA,SAAwB,CAAxBA,CAAAA,IAAAA,CAAAA,UAAAA;AAtB6B,OAkB/BF,EAlB+B,CAyB/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,MAAAA,aAAa,GAAG,MAAM,CAAN,IAAA,CAAA,wBAAA,EAAA,GAAA,CACT,UAAA,KAAA,EAAK;AAAA,eAAA,GAAA,MAAA,CAAA,KAAA,EAAA,KAAA,EAAA,MAAA,CAAkBC,wBAAwB,CAAxBA,KAAwB,CAAxBA,CAAAA,IAAAA,CAAlB,GAAkBA,CAAlB,EAAA,GAAA,CAAA;AADI,OAAA,EAAA,IAAA,CAAhBD,MAAgB,CAAhBA;AAIA,aAAA,aAAA;AACD;;;;;;;;;;;iDAGQ,KAAA,eAAA,CAAA,WAAA,CACQ,KAAA,oBAAA,CADR,SAAA,EAAA,SAAA,GAAA,MAAA,CAGG;AACNK,kBAAAA,CAAC,EACC,KAAA,oBAAA,CAAA,MAAA,CAAA,KAAA,KAAA,EAAA,GAAA,GAAA,GAEI,KAAA,oBAAA,CAAA,MAAA,CAJA,KAAA;AAKNC,kBAAAA,QAAQ,EAAE,KAAA,cAAA,CAAA,IAAA,CALJ,GAKI,CALJ;AAMNC,kBAAAA,QAAQ,EAAE,CAAC,KAAA,oBAAA,CAAA,MAAA,CAAD,MAAA,EAAA,IAAA,GAAA,IAAA,CANJ,GAMI,CANJ;AAONC,kBAAAA,SAAS,EAAE,KAAA,kBAAA,CACT,KAAA,oBAAA,CAAA,MAAA,CARI,YAOK,CAPL;AAUNC,kBAAAA,gBAAgB,EAAE,KAAA,oBAAA,CAAA,MAAA,CAVZ,iBAAA;AAWNC,kBAAAA,IAAI,EAAE,KAAA,oBAAA,CAAA,MAAA,CAAA,IAAA,GAAwC;AAXxC,iBAHH,C","sourcesContent":["\"use strict\";\n\nexport class SearchRequestAdapter {\n  constructor(instantsearchRequest, typesenseClient, searchByFields) {\n    this.instantsearchRequest = instantsearchRequest;\n    this.typesenseClient = typesenseClient;\n    this.searchByFields = searchByFields;\n  }\n\n  _adaptFacetFilters(facetFilters) {\n    let adaptedResult = \"\";\n\n    if (!facetFilters) {\n      return adaptedResult;\n    }\n\n    const intermediateFacetFilters = {};\n\n    // Need to transform:\n    // faceFilters = [[\"facet1:value1\", \"facet1:value2\"], \"facet2:value3\"]]\n    //\n    // Into this:\n    // intermediateFacetFilters = {\n    //     \"facet1\": [\"value1\", \"value2\"],\n    //     \"facet2\": [\"value1\", \"value2\"]\n    // }\n\n    facetFilters.flat().forEach(facetFilter => {\n      const [facetName, facetValue] = facetFilter.split(\":\");\n      intermediateFacetFilters[facetName] =\n        intermediateFacetFilters[facetName] || [];\n      intermediateFacetFilters[facetName].push(facetValue);\n    });\n\n    // Need to transform this:\n    // intermediateFacetFilters = {\n    //     \"facet1\": [\"value1\", \"value2\"],\n    //     \"facet2\": [\"value1\", \"value2\"]\n    // }\n    //\n    // Into this:\n    // facet1: [value1,value2] && facet2: [value1,value2]\n\n    adaptedResult = Object.keys(intermediateFacetFilters)\n      .map(facet => `${facet}: [${intermediateFacetFilters[facet].join(\",\")}]`)\n      .join(\" && \");\n\n    return adaptedResult;\n  }\n\n  async request() {\n    return this.typesenseClient\n      .collections(this.instantsearchRequest.indexName)\n      .documents()\n      .search({\n        q:\n          this.instantsearchRequest.params.query === \"\"\n            ? \"*\"\n            : this.instantsearchRequest.params.query,\n        query_by: this.searchByFields.join(\",\"),\n        facet_by: [this.instantsearchRequest.params.facets].flat().join(\",\"),\n        filter_by: this._adaptFacetFilters(\n          this.instantsearchRequest.params.facetFilters\n        ),\n        max_facet_values: this.instantsearchRequest.params.maxValuesPerFacet,\n        page: this.instantsearchRequest.params.page + 1\n      });\n  }\n}\n"],"file":"SearchRequestAdapter.js"}