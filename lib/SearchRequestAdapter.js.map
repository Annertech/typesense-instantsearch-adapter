{"version":3,"sources":["../src/SearchRequestAdapter.js"],"names":["SearchRequestAdapter","RegExp","instantsearchRequest","typesenseClient","searchByFields","facetFilters","adaptedResult","intermediateFacetFilters","flat","forEach","facetFilter","split","facetName","facetValue","push","Object","entries","map","facet","values","concat","join","numericFilters","numericFilter","replace","adaptedFilters","_adaptFacetFilters","_adaptNumericFilters","filter","indexName","match","constructor","INDEX_NAME_MATCHING_REGEX","params","typesenseSearchParams","q","query","query_by","facet_by","facets","filter_by","_adaptFilters","sort_by","_adaptSortBy","max_facet_values","maxValuesPerFacet","page","facetQuery","facet_query","max_hits","per_page","hitsPerPage","collections","_adaptIndexName","documents","search","_buildSearchParameters"],"mappings":"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","sourcesContent":["\"use strict\";\n\nexport class SearchRequestAdapter {\n  static get INDEX_NAME_MATCHING_REGEX() {\n    return new RegExp(\"^(.+?)(?=(/sort/(.*))|$)\");\n  }\n\n  constructor(instantsearchRequest, typesenseClient, searchByFields) {\n    this.instantsearchRequest = instantsearchRequest;\n    this.typesenseClient = typesenseClient;\n    this.searchByFields = searchByFields;\n  }\n\n  _adaptFacetFilters(facetFilters) {\n    let adaptedResult = \"\";\n\n    if (!facetFilters) {\n      return adaptedResult;\n    }\n\n    const intermediateFacetFilters = {};\n\n    // Need to transform:\n    // faceFilters = [[\"facet1:value1\", \"facet1:value2\"], \"facet2:value3\"]]\n    //\n    // Into this:\n    // intermediateFacetFilters = {\n    //     \"facet1\": [\"value1\", \"value2\"],\n    //     \"facet2\": [\"value1\", \"value2\"]\n    // }\n\n    facetFilters.flat().forEach(facetFilter => {\n      const [facetName, facetValue] = facetFilter.split(\":\");\n      intermediateFacetFilters[facetName] =\n        intermediateFacetFilters[facetName] || [];\n      intermediateFacetFilters[facetName].push(facetValue);\n    });\n\n    // Need to transform this:\n    // intermediateFacetFilters = {\n    //     \"facet1\": [\"value1\", \"value2\"],\n    //     \"facet2\": [\"value1\", \"value2\"]\n    // }\n    //\n    // Into this:\n    // facet1: [value1,value2] && facet2: [value1,value2]\n\n    adaptedResult = Object.entries(intermediateFacetFilters)\n      .map(([facet, values]) =>\n        \"\".concat(facet, \": [\").concat(values.join(\",\"), \"]\")\n      )\n      .join(\" && \");\n\n    return adaptedResult;\n  }\n\n  _adaptNumericFilters(numericFilters) {\n    let adaptedResult = \"\";\n\n    if (!numericFilters) {\n      return adaptedResult;\n    }\n\n    adaptedResult = numericFilters\n      .map(numericFilter => numericFilter.replace(new RegExp(\"(>|<=)\"), \":$1\"))\n      .join(\" && \");\n\n    return adaptedResult;\n  }\n\n  _adaptFilters(facetFilters, numericFilters) {\n    const adaptedFilters = [];\n\n    adaptedFilters.push(this._adaptFacetFilters(facetFilters));\n    adaptedFilters.push(this._adaptNumericFilters(numericFilters));\n\n    return adaptedFilters.filter(filter => filter !== \"\").join(\" && \");\n  }\n\n  _adaptIndexName(indexName) {\n    return indexName.match(this.constructor.INDEX_NAME_MATCHING_REGEX)[1];\n  }\n\n  _adaptSortBy(indexName) {\n    return indexName.match(this.constructor.INDEX_NAME_MATCHING_REGEX)[3];\n  }\n\n  _buildSearchParameters() {\n    const params = this.instantsearchRequest.params;\n    const indexName = this.instantsearchRequest.indexName;\n    const typesenseSearchParams = {\n      q: params.query === \"\" ? \"*\" : params.query,\n      query_by: this.searchByFields.join(\",\"),\n      facet_by: [params.facets].flat().join(\",\"),\n      filter_by: this._adaptFilters(params.facetFilters, params.numericFilters),\n      sort_by: this._adaptSortBy(indexName),\n      max_facet_values: params.maxValuesPerFacet,\n      page: (params.page || 0) + 1\n    };\n\n    if (params.facetQuery) {\n      typesenseSearchParams.facet_query = `${params.facetName}:${params.facetQuery}`;\n      typesenseSearchParams.max_hits = 1;\n      typesenseSearchParams.per_page = 1;\n    }\n\n    if (params.hitsPerPage) {\n      typesenseSearchParams.per_page = params.hitsPerPage;\n    }\n\n    // console.log(params);\n    // console.log(typesenseSearchParams);\n\n    return typesenseSearchParams;\n  }\n\n  async request() {\n    return this.typesenseClient\n      .collections(this._adaptIndexName(this.instantsearchRequest.indexName))\n      .documents()\n      .search(this._buildSearchParameters());\n  }\n}\n"],"file":"SearchRequestAdapter.js"}