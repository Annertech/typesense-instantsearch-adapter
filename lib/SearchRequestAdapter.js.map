{"version":3,"sources":["../src/SearchRequestAdapter.js"],"names":["SearchRequestAdapter","facetFilters","adaptedResult","intermediateFacetFilters","facetName","facetValue","facetFilter","numericFilters","numericFilter","adaptedFilters","filter","indexName","params","q","query_by","facet_by","filter_by","sort_by","max_facet_values","page"],"mappings":"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","sourcesContent":["\"use strict\";\n\nexport class SearchRequestAdapter {\n  static get INDEX_NAME_MATCHING_REGEX() {\n    return new RegExp(\"^(.+?)(?=(/sort/(.*))|$)\");\n  }\n\n  constructor(instantsearchRequest, typesenseClient, searchByFields) {\n    this.instantsearchRequest = instantsearchRequest;\n    this.typesenseClient = typesenseClient;\n    this.searchByFields = searchByFields;\n  }\n\n  _adaptFacetFilters(facetFilters) {\n    let adaptedResult = \"\";\n\n    if (!facetFilters) {\n      return adaptedResult;\n    }\n\n    const intermediateFacetFilters = {};\n\n    // Need to transform:\n    // faceFilters = [[\"facet1:value1\", \"facet1:value2\"], \"facet2:value3\"]]\n    //\n    // Into this:\n    // intermediateFacetFilters = {\n    //     \"facet1\": [\"value1\", \"value2\"],\n    //     \"facet2\": [\"value1\", \"value2\"]\n    // }\n\n    facetFilters.flat().forEach(facetFilter => {\n      const [facetName, facetValue] = facetFilter.split(\":\");\n      intermediateFacetFilters[facetName] =\n        intermediateFacetFilters[facetName] || [];\n      intermediateFacetFilters[facetName].push(facetValue);\n    });\n\n    // Need to transform this:\n    // intermediateFacetFilters = {\n    //     \"facet1\": [\"value1\", \"value2\"],\n    //     \"facet2\": [\"value1\", \"value2\"]\n    // }\n    //\n    // Into this:\n    // facet1: [value1,value2] && facet2: [value1,value2]\n\n    adaptedResult = Object.keys(intermediateFacetFilters)\n      .map(facet => `${facet}: [${intermediateFacetFilters[facet].join(\",\")}]`)\n      .join(\" && \");\n\n    return adaptedResult;\n  }\n\n  _adaptNumericFilters(numericFilters) {\n    let adaptedResult = \"\";\n\n    if (!numericFilters) {\n      return adaptedResult;\n    }\n\n    adaptedResult = numericFilters\n      .map(numericFilter => numericFilter.replace(new RegExp(\"(>|<=)\"), \":$1\"))\n      .join(\" && \");\n\n    return adaptedResult;\n  }\n\n  _adaptFilters(facetFilters, numericFilters) {\n    const adaptedFilters = [];\n\n    adaptedFilters.push(this._adaptFacetFilters(facetFilters));\n    adaptedFilters.push(this._adaptNumericFilters(numericFilters));\n\n    return adaptedFilters.filter(filter => filter !== \"\").join(\" && \");\n  }\n\n  _adaptIndexName(indexName) {\n    return indexName.match(this.constructor.INDEX_NAME_MATCHING_REGEX)[1];\n  }\n\n  _adaptSortBy(indexName) {\n    return indexName.match(this.constructor.INDEX_NAME_MATCHING_REGEX)[3];\n  }\n\n  async request() {\n    const indexName = this.instantsearchRequest.indexName;\n    const params = this.instantsearchRequest.params;\n    return this.typesenseClient\n      .collections(this._adaptIndexName(indexName))\n      .documents()\n      .search({\n        q: params.query === \"\" ? \"*\" : params.query,\n        query_by: this.searchByFields.join(\",\"),\n        facet_by: [params.facets].flat().join(\",\"),\n        filter_by: this._adaptFilters(\n          params.facetFilters,\n          params.numericFilters\n        ),\n        sort_by: this._adaptSortBy(indexName),\n        max_facet_values: params.maxValuesPerFacet,\n        page: params.page + 1\n      });\n  }\n}\n"],"file":"SearchRequestAdapter.js"}