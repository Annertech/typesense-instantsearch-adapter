{"version":3,"sources":["../src/TypesenseInstantsearchAdapter.js"],"names":["TypesenseInstantsearchAdapter","options","configuration","Configuration","validate","typesenseClient","Typesense","Client","server","searchClient","search","instantsearchRequests","searchTypesenseAndAdapt","searchForFacetValues","searchTypesenseForFacetValuesAndAdapt","map","instantsearchRequest","_adaptAndPerformTypesenseRequest","typesenseResponse","responseAdapter","SearchResponseAdapter","adapt","adaptedResponses","Promise","all","results","FacetSearchResponseAdapter","requestAdapter","SearchRequestAdapter","searchByFields","request"],"mappings":"AAAA;;;;;;;;;;;;;;;;;AAEA;;AACA;;AACA;;AACA;;AACA;;IAEqBA,6B;;;AACnB,yCAAYC,OAAZ,EAAqB;AAAA;;AAAA;AACnB,SAAKC,aAAL,GAAqB,IAAIC,4BAAJ,CAAkBF,OAAlB,CAArB;AACA,SAAKC,aAAL,CAAmBE,QAAnB;AACA,SAAKC,eAAL,GAAuB,IAAIC,sBAAUC,MAAd,CAAqB,KAAKL,aAAL,CAAmBM,MAAxC,CAAvB;AACA,SAAKC,YAAL,GAAoB;AAClBC,MAAAA,MAAM,EAAE,gBAAAC,qBAAqB;AAAA,eAC3B,KAAI,CAACC,uBAAL,CAA6BD,qBAA7B,CAD2B;AAAA,OADX;AAGlBE,MAAAA,oBAAoB,EAAE,8BAAAF,qBAAqB;AAAA,eACzC,KAAI,CAACG,qCAAL,CAA2CH,qBAA3C,CADyC;AAAA;AAHzB,KAApB;AAMD;;;;;;;qDAE6BA,qB;;;;;;;;;uBACGA,qBAAqB,CAACI,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA,+CAC7B,iBAAMC,oBAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCACkC,MAAI,CAACC,gCAAL,CAC9BD,oBAD8B,CADlC;;AAAA;AACQE,4BAAAA,iBADR;AAIQC,4BAAAA,eAJR,GAI0B,IAAIC,4CAAJ,CACtBF,iBADsB,EAEtBF,oBAFsB,CAJ1B;AAAA,6DAQSG,eAAe,CAACE,KAAhB,EART;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAD6B;;AAAA;AAAA;AAAA;AAAA,oB;;;AAAzBC,gBAAAA,gB;;uBAagBC,OAAO,CAACC,GAAR,CAAYF,gBAAZ,C;;;AAAhBG,gBAAAA,O;kDACC;AACLA,kBAAAA,OAAO,EAAEA;AADJ,iB;;;;;;;;;;;;;;;;;;;;;qDAKmCd,qB;;;;;;;;;uBACXA,qBAAqB,CAACI,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA,+CAC7B,kBAAMC,oBAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCACkC,MAAI,CAACC,gCAAL,CAC9BD,oBAD8B,CADlC;;AAAA;AACQE,4BAAAA,iBADR;AAIQC,4BAAAA,eAJR,GAI0B,IAAIO,sDAAJ,CACtBR,iBADsB,EAEtBF,oBAFsB,CAJ1B;AAAA,8DAQSG,eAAe,CAACE,KAAhB,EART;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAD6B;;AAAA;AAAA;AAAA;AAAA,oB;;;AAAzBC,gBAAAA,gB;;uBAagBC,OAAO,CAACC,GAAR,CAAYF,gBAAZ,C;;;AAAhBG,gBAAAA,O;kDACCA,O;;;;;;;;;;;;;;;;;;;;;qDAG8BT,oB;;;;;;AAC/BW,gBAAAA,c,GAAiB,IAAIC,0CAAJ,CACrBZ,oBADqB,EAErB,KAAKX,eAFgB,EAGrB,KAAKH,aAAL,CAAmB2B,cAHE,C;;uBAKSF,cAAc,CAACG,OAAf,E;;;AAA1BZ,gBAAAA,iB;kDACCA,iB","sourcesContent":["\"use strict\";\n\nimport { Configuration } from \"./Configuration\";\nimport Typesense from \"typesense\";\nimport { SearchRequestAdapter } from \"./SearchRequestAdapter\";\nimport { SearchResponseAdapter } from \"./SearchResponseAdapter\";\nimport { FacetSearchResponseAdapter } from \"./FacetSearchResponseAdapter\";\n\nexport default class TypesenseInstantsearchAdapter {\n  constructor(options) {\n    this.configuration = new Configuration(options);\n    this.configuration.validate();\n    this.typesenseClient = new Typesense.Client(this.configuration.server);\n    this.searchClient = {\n      search: instantsearchRequests =>\n        this.searchTypesenseAndAdapt(instantsearchRequests),\n      searchForFacetValues: instantsearchRequests =>\n        this.searchTypesenseForFacetValuesAndAdapt(instantsearchRequests)\n    };\n  }\n\n  async searchTypesenseAndAdapt(instantsearchRequests) {\n    const adaptedResponses = await instantsearchRequests.map(\n      async instantsearchRequest => {\n        const typesenseResponse = await this._adaptAndPerformTypesenseRequest(\n          instantsearchRequest\n        );\n        const responseAdapter = new SearchResponseAdapter(\n          typesenseResponse,\n          instantsearchRequest\n        );\n        return responseAdapter.adapt();\n      }\n    );\n\n    const results = await Promise.all(adaptedResponses);\n    return {\n      results: results\n    };\n  }\n\n  async searchTypesenseForFacetValuesAndAdapt(instantsearchRequests) {\n    const adaptedResponses = await instantsearchRequests.map(\n      async instantsearchRequest => {\n        const typesenseResponse = await this._adaptAndPerformTypesenseRequest(\n          instantsearchRequest\n        );\n        const responseAdapter = new FacetSearchResponseAdapter(\n          typesenseResponse,\n          instantsearchRequest\n        );\n        return responseAdapter.adapt();\n      }\n    );\n\n    const results = await Promise.all(adaptedResponses);\n    return results;\n  }\n\n  async _adaptAndPerformTypesenseRequest(instantsearchRequest) {\n    const requestAdapter = new SearchRequestAdapter(\n      instantsearchRequest,\n      this.typesenseClient,\n      this.configuration.searchByFields\n    );\n    const typesenseResponse = await requestAdapter.request();\n    return typesenseResponse;\n  }\n}\n"],"file":"TypesenseInstantsearchAdapter.js"}