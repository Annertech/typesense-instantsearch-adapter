{"version":3,"sources":["../src/SearchResponseAdapter.js"],"names":["SearchResponseAdapter","typesenseResponse","instantsearchRequest","typesenseHits","adaptedResult","map","typesenseHit","adaptedHit","document","objectID","id","_highlightResult","_adaptHighlightResult","_snippetResult","value","replace","RegExp","params","highlightPreTag","highlightPostTag","result","Object","assign","entries","attribute","matchLevel","matchedWords","highlights","forEach","highlight","field","snippet","k","v","Array","isArray","push","_adaptHighlightTag","typesenseFacetCounts","facet","field_name","counts","count","found","hits","length","Number","isFinite","Math","ceil","_adaptHits","nbHits","page","nbPages","_adaptNumberOfPages","hitsPerPage","facets","_adaptFacets","facet_counts","processingTimeMS","search_time_ms"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;IAEaA,qB;;;AACX,iCAAYC,iBAAZ,EAA+BC,oBAA/B,EAAqD;AAAA;AACnD,SAAKD,iBAAL,GAAyBA,iBAAzB;AACA,SAAKC,oBAAL,GAA4BA,oBAA5B;AACD;;;;+BAEUC,a,EAAe;AAAA;;AACxB,UAAIC,aAAa,GAAG,EAApB;AACAA,MAAAA,aAAa,GAAGD,aAAa,CAACE,GAAd,CAAkB,UAAAC,YAAY,EAAI;AAChD,YAAMC,UAAU,qBACXD,YAAY,CAACE,QADF,CAAhB;;AAGAD,QAAAA,UAAU,CAACE,QAAX,GAAsBH,YAAY,CAACE,QAAb,CAAsBE,EAA5C;AACAH,QAAAA,UAAU,CAACI,gBAAX,GAA8B,KAAI,CAACC,qBAAL,CAA2BN,YAA3B,CAA9B,CALgD,CAMhD;;AACAC,QAAAA,UAAU,CAACM,cAAX,GAA4BN,UAAU,CAACI,gBAAvC;AACA,eAAOJ,UAAP;AACD,OATe,CAAhB;AAUA,aAAOH,aAAP;AACD;;;uCAEkBU,K,EAAO;AACxB,aAAOA,KAAK,CACTC,OADI,CAEH,IAAIC,MAAJ,CAAW,QAAX,EAAqB,GAArB,CAFG,EAGH,KAAKd,oBAAL,CAA0Be,MAA1B,CAAiCC,eAH9B,EAKJH,OALI,CAMH,IAAIC,MAAJ,CAAW,SAAX,EAAsB,GAAtB,CANG,EAOH,KAAKd,oBAAL,CAA0Be,MAA1B,CAAiCE,gBAP9B,CAAP;AASD;;;0CAEqBb,Y,EAAc;AAAA;;AAClC;AACA;AAEA,UAAMc,MAAM,GAAGC,MAAM,CAACC,MAAP,OAAAD,MAAM,GACnB,EADmB,6CAEhBA,MAAM,CAACE,OAAP,CAAejB,YAAY,CAACE,QAA5B,EAAsCH,GAAtC,CAA0C;AAAA;AAAA,YAAEmB,SAAF;AAAA,YAAaV,KAAb;;AAAA,oDAC1CU,SAD0C,EAC9B;AACXV,UAAAA,KAAK,EAAEA,KADI;AAEXW,UAAAA,UAAU,EAAE,MAFD;AAGXC,UAAAA,YAAY,EAAE;AAHH,SAD8B;AAAA,OAA1C,CAFgB,GAArB;AAWApB,MAAAA,YAAY,CAACqB,UAAb,CAAwBC,OAAxB,CAAgC,UAAAC,SAAS,EAAI;AAC3CT,QAAAA,MAAM,CAACS,SAAS,CAACC,KAAX,CAAN,GAA0B;AACxBhB,UAAAA,KAAK,EAAEe,SAAS,CAACE,OADO;AAExBN,UAAAA,UAAU,EAAE,MAFY;AAGxBC,UAAAA,YAAY,EAAE,EAHU,CAGP;;AAHO,SAA1B;AAKD,OAND,EAfkC,CAuBlC;AACA;;AACAL,MAAAA,MAAM,CAACE,OAAP,CAAeH,MAAf,EAAuBQ,OAAvB,CAA+B,iBAAY;AAAA;AAAA,YAAVI,CAAU;AAAA,YAAPC,CAAO;;AACzC,YAAMT,SAAS,GAAGQ,CAAlB;AADyC,YAEjClB,KAFiC,GAEGmB,CAFH,CAEjCnB,KAFiC;AAAA,YAE1BW,UAF0B,GAEGQ,CAFH,CAE1BR,UAF0B;AAAA,YAEdC,YAFc,GAEGO,CAFH,CAEdP,YAFc;;AAGzC,YAAIQ,KAAK,CAACC,OAAN,CAAcrB,KAAd,CAAJ,EAA0B;AACxBM,UAAAA,MAAM,CAACI,SAAD,CAAN,GAAoB,EAApB;AACAV,UAAAA,KAAK,CAACc,OAAN,CAAc,UAAAK,CAAC,EAAI;AACjBb,YAAAA,MAAM,CAACI,SAAD,CAAN,CAAkBY,IAAlB,CAAuB;AACrBtB,cAAAA,KAAK,EAAE,MAAI,CAACuB,kBAAL,WAA2BJ,CAA3B,EADc;AAErBR,cAAAA,UAAU,EAAEA,UAFS;AAEG;AACxBC,cAAAA,YAAY,EAAEA,YAHO,CAGM;;AAHN,aAAvB;AAKD,WAND;AAOD,SATD,MASO;AACL;AACAN,UAAAA,MAAM,CAACI,SAAD,CAAN,CAAkBV,KAAlB,GAA0B,MAAI,CAACuB,kBAAL,WAA2BvB,KAA3B,EAA1B;AACD;AACF,OAhBD;AAiBA,aAAOM,MAAP;AACD;;;iCAEYkB,oB,EAAsB;AACjC,UAAMlC,aAAa,GAAG,EAAtB;AACAkC,MAAAA,oBAAoB,CAACV,OAArB,CAA6B,UAAAW,KAAK,EAAI;AACpClB,QAAAA,MAAM,CAACC,MAAP,CAAclB,aAAd,uCACGmC,KAAK,CAACC,UADT,EACsBnB,MAAM,CAACC,MAAP,OAAAD,MAAM,GACxB,EADwB,6CAErBkB,KAAK,CAACE,MAAN,CAAapC,GAAb,CAAiB,UAAAqC,KAAK;AAAA,sDAAQA,KAAK,CAAC5B,KAAd,EAAsB4B,KAAK,CAACA,KAA5B;AAAA,SAAtB,CAFqB,GAD5B;AAMD,OAPD;AAQA,aAAOtC,aAAP;AACD;;;0CAEqB;AACpB,UAAMgB,MAAM,GACV,KAAKnB,iBAAL,CAAuB0C,KAAvB,GAA+B,KAAK1C,iBAAL,CAAuB2C,IAAvB,CAA4BC,MAD7D;;AAEA,UAAIC,MAAM,CAACC,QAAP,CAAgB3B,MAAhB,CAAJ,EAA6B;AAC3B,eAAO4B,IAAI,CAACC,IAAL,CAAU7B,MAAV,CAAP;AACD,OAFD,MAEO;AACL,eAAO,CAAP;AACD;AACF;;;4BAEO;AACN,UAAMhB,aAAa,GAAG;AACpBwC,QAAAA,IAAI,EAAE,KAAKM,UAAL,CAAgB,KAAKjD,iBAAL,CAAuB2C,IAAvC,CADc;AAEpBO,QAAAA,MAAM,EAAE,KAAKlD,iBAAL,CAAuB0C,KAFX;AAGpBS,QAAAA,IAAI,EAAE,KAAKnD,iBAAL,CAAuBmD,IAHT;AAIpBC,QAAAA,OAAO,EAAE,KAAKC,mBAAL,EAJW;AAKpBC,QAAAA,WAAW,EAAE,KAAKtD,iBAAL,CAAuB2C,IAAvB,CAA4BC,MALrB;AAMpBW,QAAAA,MAAM,EAAE,KAAKC,YAAL,CAAkB,KAAKxD,iBAAL,CAAuByD,YAAvB,IAAuC,EAAzD,CANY;AAOpBC,QAAAA,gBAAgB,EAAE,KAAK1D,iBAAL,CAAuB2D;AAPrB,OAAtB;AASA,aAAOxD,aAAP;AACD","sourcesContent":["\"use strict\";\n\nexport class SearchResponseAdapter {\n  constructor(typesenseResponse, instantsearchRequest) {\n    this.typesenseResponse = typesenseResponse;\n    this.instantsearchRequest = instantsearchRequest;\n  }\n\n  _adaptHits(typesenseHits) {\n    let adaptedResult = [];\n    adaptedResult = typesenseHits.map(typesenseHit => {\n      const adaptedHit = {\n        ...typesenseHit.document\n      };\n      adaptedHit.objectID = typesenseHit.document.id;\n      adaptedHit._highlightResult = this._adaptHighlightResult(typesenseHit);\n      // Todo: Fix Snippets and Highlights\n      adaptedHit._snippetResult = adaptedHit._highlightResult;\n      return adaptedHit;\n    });\n    return adaptedResult;\n  }\n\n  _adaptHighlightTag(value) {\n    return value\n      .replace(\n        new RegExp(\"<mark>\", \"g\"),\n        this.instantsearchRequest.params.highlightPreTag\n      )\n      .replace(\n        new RegExp(\"</mark>\", \"g\"),\n        this.instantsearchRequest.params.highlightPostTag\n      );\n  }\n\n  _adaptHighlightResult(typesenseHit) {\n    // Algolia lists all searchable attributes in this key, even if there are no matches\n    // So do the same and then override highlights\n\n    const result = Object.assign(\n      {},\n      ...Object.entries(typesenseHit.document).map(([attribute, value]) => ({\n        [attribute]: {\n          value: value,\n          matchLevel: \"none\",\n          matchedWords: []\n        }\n      }))\n    );\n\n    typesenseHit.highlights.forEach(highlight => {\n      result[highlight.field] = {\n        value: highlight.snippet,\n        matchLevel: \"full\",\n        matchedWords: [] // Todo: Fix MatchedWords\n      };\n    });\n\n    // Now convert any values that have an array value\n    // Also, replace highlight tag\n    Object.entries(result).forEach(([k, v]) => {\n      const attribute = k;\n      const { value, matchLevel, matchedWords } = v;\n      if (Array.isArray(value)) {\n        result[attribute] = [];\n        value.forEach(v => {\n          result[attribute].push({\n            value: this._adaptHighlightTag(`${v}`),\n            matchLevel: matchLevel, // TODO: Fix MatchLevel for array\n            matchedWords: matchedWords // TODO: Fix MatchedWords for array\n          });\n        });\n      } else {\n        // Convert all values to strings\n        result[attribute].value = this._adaptHighlightTag(`${value}`);\n      }\n    });\n    return result;\n  }\n\n  _adaptFacets(typesenseFacetCounts) {\n    const adaptedResult = {};\n    typesenseFacetCounts.forEach(facet => {\n      Object.assign(adaptedResult, {\n        [facet.field_name]: Object.assign(\n          {},\n          ...facet.counts.map(count => ({ [count.value]: count.count }))\n        )\n      });\n    });\n    return adaptedResult;\n  }\n\n  _adaptNumberOfPages() {\n    const result =\n      this.typesenseResponse.found / this.typesenseResponse.hits.length;\n    if (Number.isFinite(result)) {\n      return Math.ceil(result);\n    } else {\n      return 1;\n    }\n  }\n\n  adapt() {\n    const adaptedResult = {\n      hits: this._adaptHits(this.typesenseResponse.hits),\n      nbHits: this.typesenseResponse.found,\n      page: this.typesenseResponse.page,\n      nbPages: this._adaptNumberOfPages(),\n      hitsPerPage: this.typesenseResponse.hits.length,\n      facets: this._adaptFacets(this.typesenseResponse.facet_counts || []),\n      processingTimeMS: this.typesenseResponse.search_time_ms\n    };\n    return adaptedResult;\n  }\n}\n"],"file":"SearchResponseAdapter.js"}