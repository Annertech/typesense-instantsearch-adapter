{"version":3,"sources":["../src/FacetSearchResponseAdapter.js"],"names":["FacetSearchResponseAdapter","typesenseFacetCounts","adaptedResult","facet","value","facetCount","highlighted","count","result","Number","Math","facetHits","exhaustiveFacetsCount","processingTimeMS","search_time_ms"],"mappings":"AAAA;;;;;;;;;;;;;IAEaA,0B;;;AACX,WAAA,0BAAA,CAAA,iBAAA,EAAA,oBAAA,EAAqD;AAAA,KAAA,GAAA,gBAAA,CAAA,SAAA,CAAA,EAAA,IAAA,EAAA,0BAAA;AACnD,SAAA,iBAAA,GAAA,iBAAA;AACA,SAAA,oBAAA,GAAA,oBAAA;AACD;;;;oCAEeC,oB,EAAsB;AAAA,UAAA,KAAA,GAAA,IAAA;;AACpC,UAAIC,aAAa,GAAjB,EAAA;AACA,UAAMC,KAAK,GAAG,oBAAoB,CAApB,IAAA,CACZ,UAAA,KAAA,EAAK;AAAA,eAAIA,KAAK,CAALA,UAAAA,KAAqB,KAAI,CAAJ,oBAAA,CAAA,MAAA,CAAzB,SAAA;AADP,OAAc,CAAd;AAIAD,MAAAA,aAAa,GAAG,KAAK,CAAL,MAAA,CAAA,GAAA,CAAiB,UAAA,UAAA,EAAU;AAAA,eAAK;AAC9CE,UAAAA,KAAK,EAAEC,UAAU,CAD6B,KAAA;AAE9CC,UAAAA,WAAW,EAAED,UAAU,CAFuB,KAAA;AAEf;AAC/BE,UAAAA,KAAK,EAAEF,UAAU,CAACE;AAH4B,SAAL;AAA3CL,OAAgB,CAAhBA;AAMA,aAAA,aAAA;AACD;;;0CAEqB;AACpB,UAAMM,MAAM,GACV,KAAA,iBAAA,CAAA,KAAA,GAA+B,KAAA,iBAAA,CAAA,IAAA,CADjC,MAAA;;AAEA,UAAIC,MAAM,CAANA,QAAAA,CAAJ,MAAIA,CAAJ,EAA6B;AAC3B,eAAOC,IAAI,CAAJA,IAAAA,CAAP,MAAOA,CAAP;AADF,OAAA,MAEO;AACL,eAAA,CAAA;AACD;AACF;;;4BAEO;AACN,UAAMR,aAAa,GAAG;AACpBS,QAAAA,SAAS,EAAE,KAAA,eAAA,CAAqB,KAAA,iBAAA,CADZ,YACT,CADS;AAEpBC,QAAAA,qBAAqB,EAFD,IAAA;AAGpBC,QAAAA,gBAAgB,EAAE,KAAA,iBAAA,CAAuBC;AAHrB,OAAtB;AAKA,aAAA,aAAA;AACD","sourcesContent":["\"use strict\";\n\nexport class FacetSearchResponseAdapter {\n  constructor(typesenseResponse, instantsearchRequest) {\n    this.typesenseResponse = typesenseResponse;\n    this.instantsearchRequest = instantsearchRequest;\n  }\n\n  _adaptFacetHits(typesenseFacetCounts) {\n    let adaptedResult = {};\n    const facet = typesenseFacetCounts.find(\n      facet => facet.field_name === this.instantsearchRequest.params.facetName\n    );\n\n    adaptedResult = facet.counts.map(facetCount => ({\n      value: facetCount.value,\n      highlighted: facetCount.value, // TODO: Fix highlighted facet values\n      count: facetCount.count\n    }));\n\n    return adaptedResult;\n  }\n\n  _adaptNumberOfPages() {\n    const result =\n      this.typesenseResponse.found / this.typesenseResponse.hits.length;\n    if (Number.isFinite(result)) {\n      return Math.ceil(result);\n    } else {\n      return 1;\n    }\n  }\n\n  adapt() {\n    const adaptedResult = {\n      facetHits: this._adaptFacetHits(this.typesenseResponse.facet_counts),\n      exhaustiveFacetsCount: true,\n      processingTimeMS: this.typesenseResponse.search_time_ms\n    };\n    return adaptedResult;\n  }\n}\n"],"file":"FacetSearchResponseAdapter.js"}